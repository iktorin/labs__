#include <iostream>
#include <vector>

using namespace std;

/**
 * Задано дві послідовності значень A[n] і B[m]. Замінити
 * в B[m] входження значень із A[n] на частку від ділення суми
 * елементів підпослідовності A[n] на її кількість.
 */

 /**
  * Це завдання вимагає замінити всі елементи послідовності B[m],
  * які є у послідовності A[n], на середнє значення елементів
  * послідовності A[n]. Середнє значення обчислюється як сума
  * елементів послідовності A[n], поділена на її кількість.
  *
  * Алгоритм:
  * 1. Обчислити суму елементів A[n] і їх кількість.
  * 2. Обчислити середнє значення.
  * 3. Замінити елементи у B[m], якщо вони є у A[n] і замінити їх на середнє значення.
  * 4. Вивести оновлену послідовність B[m].
  */

int main() {
    // Задаємо послідовності A і B
    vector<int> A = { 1, 2, 3 };  // Послідовність A[n]
    vector<int> B = { 3, 5, 2, 1, 8 };  // Послідовність B[m]

    // Виводимо початкові послідовності
    cout << "Початкова послідовність A: ";
    for (int i = 0; i < A.size(); ++i) {
        cout << A[i] << " ";
    }
    cout << endl;
    cout << "Початкова послідовність B: ";
    for (int i = 0; i < B.size(); ++i) {
        cout << B[i] << " ";
    }
    cout << endl;

    // Обчислюємо суму елементів A і їх кількість
    int sumA = 0;
    for (int i = 0; i < A.size(); ++i) {
        sumA += A[i];
    }
    // Обчислюємо середнє значення
    double averageA = static_cast<double>(sumA) / A.size();

    // Замінюємо елементи у B, якщо вони є у A
    for (int i = 0; i < B.size(); ++i) {
        // Перевіряємо, чи елемент B[i] є у A
        for (int j = 0; j < A.size(); ++j) {
            if (B[i] == A[j]) {
                B[i] = averageA;  // Заміна на середнє значення
                break;  // Вихід з внутрішнього циклу, щоб не продовжувати перевірку
            }
        }
    }

    // Виводимо оновлену послідовність B
    cout << "Оновлена послідовність B : ";
    for (int i = 0; i < B.size(); ++i) {
        cout << B[i] << " ";
    }
    cout << endl;

    return 0;
}